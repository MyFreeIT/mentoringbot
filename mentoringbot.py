"""
Mentoring Bot

–ê–≤—Ç–æ—Ä: Denis Odesskiy (MyFreeIT)
–û–ø–∏—Å–∞–Ω–∏–µ: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ä–µ–∞–ª–∏–∑—É–µ—Ç Telegram-–±–æ—Ç–∞ –¥–ª—è IT-—à–∫–æ–ª—ã MyFreeIT.
–û–Ω –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∞—Ä–æ–ª—è, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –º–µ–∂–¥—É
—É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∏ –º–µ–Ω—Ç–æ—Ä–æ–º, –∞ —Ç–∞–∫–∂–µ –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É –Ω–∏–º–∏.

–õ–∏—Ü–µ–Ω–∑–∏—è: –ü—Ä–æ–¥—É–∫—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏—á–Ω–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ—Ä–∞ (Denis Odesskiy (MyFreeIT)) ‚Äì —Å–º. LICENSE.
"""

import os
import asyncio
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
MENTOR_ID = int(os.getenv("MENTOR_ID"))
ACCESS_PASSWORD = os.getenv("ACCESS_PASSWORD")


class MentorChatBot:
    """
    –†–µ–∞–ª–∏–∑—É–µ—Ç –ª–æ–≥–∏–∫—É —á–∞—Ç-–±–æ—Ç–∞ –¥–ª—è IT-—à–∫–æ–ª—ã MyFreeIT:
    —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∏ –º–µ–Ω—Ç–æ—Ä–æ–º,
    –∞ —Ç–∞–∫–∂–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É –Ω–∏–º–∏.
    """

    def __init__(self, token, mentor_id, access_password):
        self.bot = Bot(token=token)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.mentor_id = mentor_id
        self.access_password = access_password
        self.users = {}         # {user_id: –∏–º—è}
        self.sessions = {}      # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏: –º–µ–Ω—Ç–æ—Ä <-> —É—á–∞—Å—Ç–Ω–∏–∫
        self.waitlist = []      # –û—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        self.history = {}       # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.awaiting_name = {}  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
        self.register_handlers()

    def register_handlers(self):
        # –ö–æ–º–∞–Ω–¥–∞ /start
        self.dp.message.register(self.send_welcome, Command("start"))
        self.dp.callback_query.register(self.enter_school, lambda c: c.data == "enter_school")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∏ –Ω–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏)
        self.dp.message.register(
            self.check_password,
            lambda msg: (msg.from_user.id not in self.users)
                        and (msg.from_user.id != self.mentor_id)
                        and (msg.from_user.id not in self.awaiting_name)
        )

        # –î–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Äì –∫–Ω–æ–ø–∫–∞ "–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–∞"
        self.dp.message.register(
            self.waiting_message,
            lambda msg: (msg.from_user.id in self.users)
                        and (msg.from_user.id not in self.sessions)
                        and (msg.from_user.id != self.mentor_id)
        )

        # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞ –º–µ–Ω—Ç–æ—Ä—É (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞)
        self.dp.message.register(
            self.forward_to_mentor,
            lambda msg: (msg.from_user.id in self.users) and (msg.from_user.id in self.sessions)
        )

        # –ú–µ–Ω—Ç–æ—Ä—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ —Å–ª—ç—à: /join –∏ /end (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏)
        self.dp.message.register(self.join_chat, Command("join"))
        self.dp.message.register(self.end_chat, Command("end"))

        # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–Ω—Ç–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫—É (inline —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞—è –∫–æ–º–∞–Ω–¥—ã)
        self.dp.message.register(
            self.forward_to_user,
            lambda msg: (msg.from_user.id == self.mentor_id)
                        and (self.mentor_id in self.sessions)
                        and (not (msg.text and msg.text.startswith('/')))
        )

        # –ö–Ω–æ–ø–∫–∞ "–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–∞" –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        self.dp.callback_query.register(self.call_mentor, lambda c: c.data == "call_mentor")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∏–º–µ–Ω–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ: –≤—ã–±–æ—Ä "–í–æ–π—Ç–∏ –∫–∞–∫ –ê–Ω–æ–Ω–∏–º" –∏–ª–∏ "–í–≤–µ—Å—Ç–∏ –∏–º—è"
        self.dp.callback_query.register(self.use_anonymous, lambda c: c.data == "use_anonymous")
        self.dp.callback_query.register(self.enter_custom_name, lambda c: c.data == "enter_custom_name")
        self.dp.message.register(self.set_custom_name, lambda msg: msg.from_user.id in self.awaiting_name)

        # Callback –¥–ª—è –º–µ–Ω—Ç–æ—Ä—Å–∫–æ–≥–æ inline‚Äë–º–µ–Ω—é (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –º–µ–Ω—Ç–æ—Ä—É)
        self.dp.callback_query.register(self.mentor_join, lambda c: c.data == "mentor_join")
        self.dp.callback_query.register(self.mentor_end, lambda c: c.data == "mentor_end")

    async def delete_webhook(self):
        """–£–¥–∞–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤."""
        await self.bot.delete_webhook(drop_pending_updates=True)

    async def send_welcome(self, message: types.Message):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
          - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äì –º–µ–Ω—Ç–æ—Ä, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è" –∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç".
          - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (—Å—Ç—É–¥–µ–Ω—Ç), –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ "–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–∞".
          - –î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äì –∫–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏".
        """
        if message.from_user.id == self.mentor_id:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="mentor_join")],
                [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", callback_data="mentor_end")]
            ])
            await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –º–µ–Ω—Ç–æ—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (—Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã /join –∏ /end):",
                                 reply_markup=keyboard)
        else:
            if message.from_user.id in self.users:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–∞", callback_data="call_mentor")]
                ])
                await message.answer("üëã –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                                     reply_markup=keyboard)
            else:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–í–æ–π—Ç–∏", callback_data="enter_school")]
                ])
                await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ IT-—à–∫–æ–ª—É MyFreeIT!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–í–æ–π—Ç–∏', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.",
                                     reply_markup=keyboard)

    async def enter_school(self, callback_query: types.CallbackQuery):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ —Å–∏—Å—Ç–µ–º—É IT-—à–∫–æ–ª—ã."""
        await self.bot.send_message(callback_query.from_user.id,
                                    "üîë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ —Å–∏—Å—Ç–µ–º—É IT-—à–∫–æ–ª—ã.")
        await callback_query.answer()

    async def check_password(self, message: types.Message):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:
          - –î–ª—è –º–µ–Ω—Ç–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–º—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è (–µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è "–ú–µ–Ω—Ç–æ—Ä").
          - –î–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –µ—Å–ª–∏ –∏–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –≤—ã–±–æ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–∫ "–í–æ–π—Ç–∏ –∫–∞–∫ –ê–Ω–æ–Ω–∏–º" –∏–ª–∏ "–í–≤–µ—Å—Ç–∏ –∏–º—è".
        """
        if message.text == self.access_password:
            if message.from_user.id == self.mentor_id:
                name = message.from_user.username if message.from_user.username else "–ú–µ–Ω—Ç–æ—Ä"
                self.users[message.from_user.id] = name
                self.history[message.from_user.id] = []
                await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –º–µ–Ω—Ç–æ—Ä!")
            else:
                if message.from_user.username is None:
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="–í–æ–π—Ç–∏ –∫–∞–∫ –ê–Ω–æ–Ω–∏–º", callback_data="use_anonymous")],
                        [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –∏–º—è", callback_data="enter_custom_name")]
                    ])
                    await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –ù–æ –≤–∞—à–µ –∏–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—Ö–æ–¥–∞:",
                                         reply_markup=keyboard)
                    return
                else:
                    self.users[message.from_user.id] = message.from_user.username
                    self.history[message.from_user.id] = []
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–∞", callback_data="call_mentor")]
                    ])
                    await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=keyboard)
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")

    async def set_custom_name(self, message: types.Message):
        """
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
        """
        user_id = message.from_user.id
        if user_id in self.awaiting_name:
            chosen_name = message.text.strip()
            if not chosen_name:
                await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
                return
            self.users[user_id] = chosen_name
            self.history[user_id] = []
            self.awaiting_name.pop(user_id)
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–∞", callback_data="call_mentor")]
            ])
            await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –ø–æ–¥ –∏–º–µ–Ω–µ–º {chosen_name}.", reply_markup=keyboard)

    async def waiting_message(self, message: types.Message):
        """
        –£–≤–µ–¥–æ–º–ª—è–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É "–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–∞".
        """
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–∞", callback_data="call_mentor")]
        ])
        await message.answer("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                             reply_markup=keyboard)

    async def call_mentor(self, callback_query: types.CallbackQuery):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–µ–Ω—Ç–æ—Ä—É.
        –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞, —É—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è.
        """
        user_id = callback_query.from_user.id
        username = self.users.get(user_id)
        if not username:
            await self.bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º –º–µ–Ω—Ç–æ—Ä–∞.")
            await callback_query.answer()
            return

        if self.mentor_id in self.sessions:
            if user_id not in self.waitlist:
                self.waitlist.append(user_id)
                await self.bot.send_message(
                    self.mentor_id,
                    f"‚ö° –£—á–∞—Å—Ç–Ω–∏–∫ {username} ({user_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è' –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /join –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞."
                )
            else:
                await self.bot.send_message(user_id, "–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–µ–Ω—Ç–æ—Ä—É.")
            await callback_query.answer("–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–µ–Ω—Ç–æ—Ä–∞.")
        else:
            await self.bot.send_message(
                self.mentor_id,
                f"‚ö° –£—á–∞—Å—Ç–Ω–∏–∫ {username} ({user_id}) –≤—ã–∑—ã–≤–∞–µ—Ç –≤–∞—Å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è' –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /join."
            )
            await callback_query.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–µ–Ω—Ç–æ—Ä–∞.")

    async def use_anonymous(self, callback: types.CallbackQuery):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–∞–∫ "–ê–Ω–æ–Ω–∏–º".
        """
        user_id = callback.from_user.id
        self.users[user_id] = "–ê–Ω–æ–Ω–∏–º"
        self.history[user_id] = []
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–∞", callback_data="call_mentor")]
        ])
        await self.bot.send_message(user_id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –ø–æ–¥ –∏–º–µ–Ω–µ–º –ê–Ω–æ–Ω–∏–º.", reply_markup=keyboard)
        await callback.answer()

    async def enter_custom_name(self, callback: types.CallbackQuery):
        """
        –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏.
        """
        user_id = callback.from_user.id
        self.awaiting_name[user_id] = True
        await self.bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        await callback.answer()

    async def join_chat(self, message: types.Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–µ–Ω—Ç–æ—Ä–∞ –∫ –æ–∂–∏–¥–∞—é—â–µ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É.
        –¢–æ–ª—å–∫–æ –º–µ–Ω—Ç–æ—Ä –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É.
        """
        if message.from_user.id != self.mentor_id:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–µ–Ω—Ç–æ—Ä–∞!")
            return

        if self.mentor_id in self.sessions:
            await message.answer("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —á–∞—Ç –ø–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
            return

        if self.waitlist:
            user_id = self.waitlist.pop(0)
        else:
            waiting = [uid for uid in self.users if uid not in self.sessions and uid != self.mentor_id]
            if not waiting:
                await message.answer("üü¢ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ñ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å–∞.")
                return
            user_id = waiting[0]

        self.sessions[self.mentor_id] = user_id
        self.sessions[user_id] = self.mentor_id
        await message.answer(f"üì© –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —É—á–∞—Å—Ç–Ω–∏–∫—É {self.users.get(user_id)}.")
        await self.bot.send_message(user_id, "üë®‚Äçüè´ –ú–µ–Ω—Ç–æ—Ä –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!")

    async def mentor_join(self, callback: types.CallbackQuery):
        """
        Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è" –º–µ–Ω—Ç–æ—Ä—É (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –º–µ–Ω—Ç–æ—Ä—É).
        """
        if callback.from_user.id != self.mentor_id:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–µ–Ω—Ç–æ—Ä–∞!", show_alert=True)
            return

        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ join_chat
        class FakeMessage:
            pass

        fake_msg = FakeMessage()
        fake_msg.from_user = callback.from_user
        fake_msg.answer = lambda text, **kwargs: self.bot.send_message(callback.from_user.id, text)
        await self.join_chat(fake_msg)
        await callback.answer()

    async def mentor_end(self, callback: types.CallbackQuery):
        """
        Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç" –º–µ–Ω—Ç–æ—Ä—É (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –º–µ–Ω—Ç–æ—Ä—É).
        """
        if callback.from_user.id != self.mentor_id:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–µ–Ω—Ç–æ—Ä–∞!", show_alert=True)
            return

        class FakeMessage:
            pass

        fake_msg = FakeMessage()
        fake_msg.from_user = callback.from_user
        fake_msg.answer = lambda text, **kwargs: self.bot.send_message(callback.from_user.id, text)
        await self.end_chat(fake_msg)
        await callback.answer()

    async def forward_to_mentor(self, message: types.Message):
        """
        –ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –º–µ–Ω—Ç–æ—Ä—É.
        """
        uid = message.from_user.id
        if uid not in self.sessions:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∂–¥–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–µ–Ω—Ç–æ—Ä–∞.")
            return
        mentor_id = self.sessions[uid]
        self.history[uid].append(f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫: {message.text}")
        await self.bot.send_message(mentor_id,
                                    f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞:\n{message.text}")

    async def forward_to_user(self, message: types.Message):
        """
        –ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—Ç–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫—É.
        """
        if self.mentor_id not in self.sessions:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
            return
        user_id = self.sessions.get(self.mentor_id)
        if not user_id:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
            return
        self.history.setdefault(user_id, []).append(f"üë®‚Äçüè´ –ú–µ–Ω—Ç–æ—Ä: {message.text}")
        await self.bot.send_message(user_id, f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω—Ç–æ—Ä–∞:\n{message.text}")

    async def end_chat(self, message: types.Message):
        """
        –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é —á–∞—Ç–∞.
        –¢–æ–ª—å–∫–æ –º–µ–Ω—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å —á–∞—Ç.
        –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—Ç–æ—Ä–∞ –≤–Ω–æ–≤—å.
        """
        if message.from_user.id != self.mentor_id:
            await message.answer("‚ùå –ß–∞—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –º–µ–Ω—Ç–æ—Ä!")
            return

        if self.mentor_id in self.sessions:
            user_id = self.sessions.pop(self.mentor_id, None)
            if user_id:
                self.sessions.pop(user_id, None)
                self.history.pop(user_id, None)
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–∞", callback_data="call_mentor")]
                ])
                await self.bot.send_message(user_id,
                                            "üìå –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω –º–µ–Ω—Ç–æ—Ä–æ–º. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                                            reply_markup=keyboard)
            await message.answer("‚úÖ –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")
            if self.waitlist:
                next_id = self.waitlist[0]
                await self.bot.send_message(
                    self.mentor_id,
                    f"‚ö° –°–ª–µ–¥—É—é—â–∏–π —É—á–∞—Å—Ç–Ω–∏–∫ ({self.users.get(next_id)}) –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è' –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /join."
                )
        else:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")

    async def start_polling(self):
        """–£–¥–∞–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π webhook –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç polling."""
        await self.delete_webhook()
        await self.dp.start_polling(self.bot)


async def keep_alive():
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä,
    —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –∑–∞—Å—ã–ø–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–∞ Render.
    """
    url = "https://yourapp.onrender.com"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ URL –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    while True:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    print(f"Keep-Alive ping status: {response.status}")
        except Exception as e:
            print(f"Keep-Alive error: {e}")
        await asyncio.sleep(840)  # 14 –º–∏–Ω—É—Ç


async def run_web_server():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º aiohttp), –∫–æ—Ç–æ—Ä—ã–π —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç,
    —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT. –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–π–º–∞—É—Ç Render –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –ø–æ—Ä—Ç–∞.
    """
    from aiohttp import web

    async def handle(request):
        return web.Response(text="–ú–µ–Ω—Ç–æ—Ä—Å–∫–∏–π –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

    app = web.Application()
    app.add_routes([web.get("/", handle)])
    port = int(os.environ.get("PORT", 8000))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    print(f"HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
    while True:
        await asyncio.sleep(3600)


async def main():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ:
      - Polling Telegram-–±–æ—Ç–∞,
      - HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Bind PORT,
      - Keep-Alive –ø–∏–Ω–≥ —Å–∞–º–æ–ø–æ–¥–¥–µ—Ä–∂–∫–∏.
    """
    bot_instance = MentorChatBot(TOKEN, MENTOR_ID, ACCESS_PASSWORD)
    await asyncio.gather(
        bot_instance.start_polling(),
        run_web_server(),
        keep_alive()
    )


if __name__ == "__main__":
    asyncio.run(main())
