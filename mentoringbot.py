"""
Mentoring Bot

–ê–≤—Ç–æ—Ä: Denis Odesskiy (MyFreeIT)
–û–ø–∏—Å–∞–Ω–∏–µ: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ä–µ–∞–ª–∏–∑—É–µ—Ç —á–∞—Ç-–±–æ—Ç–∞ –¥–ª—è IT-—à–∫–æ–ª—ã MyFreeIT. –ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è
—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∏ –º–µ–Ω—Ç–æ—Ä–æ–º, –∞ —Ç–∞–∫–∂–µ
–ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É –Ω–∏–º–∏.

–õ–∏—Ü–µ–Ω–∑–∏—è: –ü—Ä–æ–¥—É–∫—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏—á–Ω–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ—Ä–∞ (Denis Odesskiy (MyFreeIT)) ‚Äì —Å–º. LICENSE.
"""

import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.storage.memory import MemoryStorage
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å MemoryStorage –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM) –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏.
# MemoryStorage –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –±–æ—Ç–æ–≤, –Ω–æ –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏,
# —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, RedisStorage).
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
MENTOR_ID = int(os.getenv("MENTOR_ID"))
ACCESS_PASSWORD = os.getenv("ACCESS_PASSWORD")


class MentorChatBot:
    """
    –ö–ª–∞—Å—Å MentorChatBot —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ª–æ–≥–∏–∫—É —á–∞—Ç-–±–æ—Ç–∞ –¥–ª—è IT-—à–∫–æ–ª—ã MyFreeIT.

    –ê—Ç—Ä–∏–±—É—Ç—ã:
      - bot (Bot): —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ aiogram.
      - dp (Dispatcher): –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
      - mentor_id (int): –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–µ–Ω—Ç–æ—Ä—Å–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.
      - access_password (str): –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ —Å–∏—Å—Ç–µ–º—É.
      - users (dict): –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ {user_id: username}.
      - sessions (dict): —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞ –º–µ–∂–¥—É –º–µ–Ω—Ç–æ—Ä–æ–º –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.
      - history (dict): –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ {participant_id: [—Å–æ–æ–±—â–µ–Ω–∏—è]}.
    """

    def __init__(self, token, mentor_id, access_password):
        self.bot = Bot(token=token)
        self.dp = Dispatcher(storage=MemoryStorage())  # –ò—Å–ø–æ–ª—å–∑—É–µ–º MemoryStorage –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π
        self.mentor_id = mentor_id
        self.access_password = access_password
        self.users = {}
        self.sessions = {}
        self.history = {}
        self.register_handlers()

    def register_handlers(self):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏:
          - /start ‚Äì –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–í–æ–π—Ç–∏".
          - –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–í–æ–π—Ç–∏" (callback_data = "enter_school").
          - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
          - –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–µ–Ω—Ç–æ—Ä–æ–º.
          - –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞ –º–µ–Ω—Ç–æ—Ä—É.
          - –ö–æ–º–∞–Ω–¥–∞ /join –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–µ–Ω—Ç–æ—Ä–æ–º.
          - –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–Ω—Ç–æ—Ä–æ–º —É—á–∞—Å—Ç–Ω–∏–∫—É.
          - –í—ã–∑–æ–≤ –º–µ–Ω—Ç–æ—Ä–∞ (callback –∫–Ω–æ–ø–∫–∞ "–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–∞").
          - –ö–æ–º–∞–Ω–¥–∞ /end –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞.
        """
        # –ö–æ–º–∞–Ω–¥–∞ /start ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ IT-—à–∫–æ–ª—ã.
        self.dp.message.register(self.send_welcome, Command("start"))
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–í–æ–π—Ç–∏" (callback_data = "enter_school").
        self.dp.callback_query.register(self.enter_school, lambda c: c.data == "enter_school")
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (–∏ –Ω–µ –º–µ–Ω—Ç–æ—Ä) ‚Äì –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–æ–ª—å.
        self.dp.message.register(self.check_password, lambda msg: (msg.from_user.id not in self.users) and (
                    msg.from_user.id != self.mentor_id))
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ –º–µ–Ω—Ç–æ—Ä—É ‚Äì –∂–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
        self.dp.message.register(self.waiting_message, lambda msg: (msg.from_user.id in self.users) and (
                    msg.from_user.id not in self.sessions) and (msg.from_user.id != self.mentor_id))
        # –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á—ë–Ω ‚Äì –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—Ç–æ—Ä—É.
        self.dp.message.register(self.forward_to_mentor,
                                 lambda msg: (msg.from_user.id in self.users) and (msg.from_user.id in self.sessions))
        # –ú–µ–Ω—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—É /join –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –æ–∂–∏–¥–∞—é—â–µ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É.
        self.dp.message.register(self.join_chat, Command("join"))
        # –ï—Å–ª–∏ –º–µ–Ω—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äì –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫—É (–µ—Å–ª–∏ —Å–µ—Å—Å–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞).
        self.dp.message.register(self.forward_to_user,
                                 lambda msg: (msg.from_user.id == self.mentor_id) and (self.mentor_id in self.sessions))
        # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–∞" —É—á–∞—Å—Ç–Ω–∏–∫ –≤—ã–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω—Ç–æ—Ä–∞.
        self.dp.callback_query.register(self.call_mentor, lambda c: c.data == "call_mentor")
        # –ö–æ–º–∞–Ω–¥–∞ /end –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–µ–Ω—Ç–æ—Ä—É –∑–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç.
        self.dp.message.register(self.end_chat, Command("end"))

    async def delete_webhook(self):
        """–£–¥–∞–ª—è–µ—Ç –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞."""
        await self.bot.delete_webhook(drop_pending_updates=True)

    async def send_welcome(self, message: types.Message):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π '–í–æ–π—Ç–∏'.
        """
        welcome_text = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ IT-—à–∫–æ–ª—É MyFreeIT!\n"
            "–ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–í–æ–π—Ç–∏', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞."
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í–æ–π—Ç–∏", callback_data="enter_school")]
        ])
        await message.answer(welcome_text, reply_markup=keyboard)

    async def enter_school(self, callback_query: types.CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–í–æ–π—Ç–∏'. –ü—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.
        """
        await self.bot.send_message(
            callback_query.from_user.id,
            "üîë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ —Å–∏—Å—Ç–µ–º—É IT-—à–∫–æ–ª—ã."
        )
        await callback_query.answer()  # –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

    async def check_password(self, message: types.Message):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü—Ä–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        if message.text == self.access_password:
            self.users[message.from_user.id] = message.from_user.username
            self.history[message.from_user.id] = []
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–∞", callback_data="call_mentor")]
            ])
            await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=keyboard)
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")

    async def waiting_message(self, message: types.Message):
        """
        –°–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–µ–Ω—Ç–æ—Ä–∞.
        """
        await message.answer("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–µ–Ω—Ç–æ—Ä–∞.")

    async def join_chat(self, message: types.Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–µ–Ω—Ç–æ—Ä–∞: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–µ—Ä–≤–æ–º—É –æ–∂–∏–¥–∞—é—â–µ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É.
        """
        if message.from_user.id != self.mentor_id:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–µ–Ω—Ç–æ—Ä–∞!")
            return

        waiting = [uid for uid in self.users if uid not in self.sessions]
        if not waiting:
            await message.answer("üü¢ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ñ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å–∞.")
            return

        user_id = waiting[0]
        # –°–æ–∑–¥–∞—ë–º –≤–∑–∞–∏–º–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:
        self.sessions[self.mentor_id] = user_id
        self.sessions[user_id] = self.mentor_id

        await message.answer(f"üì© –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —É—á–∞—Å—Ç–Ω–∏–∫—É {self.users[user_id]}.")
        await self.bot.send_message(user_id, "üë®‚Äçüè´ –ú–µ–Ω—Ç–æ—Ä –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!")

    async def call_mentor(self, callback_query: types.CallbackQuery):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω—Ç–æ—Ä—É –æ –∑–∞–ø—Ä–æ—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.
        """
        user_id = callback_query.from_user.id
        username = self.users.get(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        await self.bot.send_message(self.mentor_id,
                                    f"‚ö° –£—á–∞—Å—Ç–Ω–∏–∫ {username} ({user_id}) –≤—ã–∑—ã–≤–∞–µ—Ç –≤–∞—Å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join.")
        await callback_query.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–µ–Ω—Ç–æ—Ä–∞.")

    async def forward_to_mentor(self, message: types.Message):
        """
        –ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –º–µ–Ω—Ç–æ—Ä—É.
        """
        uid = message.from_user.id
        if uid not in self.sessions:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∂–¥–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–µ–Ω—Ç–æ—Ä–∞.")
            return
        mentor_id = self.sessions[uid]
        self.history[uid].append(f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫: {message.text}")
        await self.bot.send_message(mentor_id, f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞:\n{message.text}")

    async def forward_to_user(self, message: types.Message):
        """
        –ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—Ç–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫—É.
        """
        if self.mentor_id not in self.sessions:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
            return
        user_id = self.sessions.get(self.mentor_id)
        if not user_id:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
            return
        self.history.setdefault(user_id, []).append(f"üë®‚Äçüè´ –ú–µ–Ω—Ç–æ—Ä: {message.text}")
        await self.bot.send_message(user_id, f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω—Ç–æ—Ä–∞:\n{message.text}")

    async def end_chat(self, message: types.Message):
        """
        –ó–∞–≤–µ—Ä—à–∞–µ—Ç —á–∞—Ç. –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –º–µ–Ω—Ç–æ—Ä—É.
        """
        if message.from_user.id != self.mentor_id:
            await message.answer("‚ùå –ß–∞—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –º–µ–Ω—Ç–æ—Ä!")
            return
        if self.mentor_id in self.sessions:
            user_id = self.sessions.pop(self.mentor_id, None)
            if user_id:
                await self.bot.send_message(user_id, "üìå –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω –º–µ–Ω—Ç–æ—Ä–æ–º. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—â–µ–Ω–∏–µ!")
                self.sessions.pop(user_id, None)
                self.history.pop(user_id, None)
            await message.answer("‚úÖ –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")
        else:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")

    async def start_polling(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç polling –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞.
        """
        await self.delete_webhook()
        await self.dp.start_polling(self.bot)


if __name__ == "__main__":
    bot = MentorChatBot(TOKEN, MENTOR_ID, ACCESS_PASSWORD)
    import asyncio

    asyncio.run(bot.start_polling())
