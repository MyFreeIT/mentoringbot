"""
Mentoring Bot

–ê–≤—Ç–æ—Ä: Denis Odesskiy (MyFreeIT)
–û–ø–∏—Å–∞–Ω–∏–µ: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ä–µ–∞–ª–∏–∑—É–µ—Ç —á–∞—Ç-–±–æ—Ç–∞ –¥–ª—è IT-—à–∫–æ–ª—ã MyFreeIT. –ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è
—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∏ –º–µ–Ω—Ç–æ—Ä–æ–º, –∞ —Ç–∞–∫–∂–µ
–ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É –Ω–∏–º–∏.

–õ–∏—Ü–µ–Ω–∑–∏—è: –ü—Ä–æ–¥—É–∫—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏—á–Ω–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ—Ä–∞ (Denis Odesskiy (MyFreeIT)) ‚Äì —Å–º. LICENSE.
"""

import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.storage.memory import MemoryStorage  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º `MemoryStorage`
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
MENTOR_ID = int(os.getenv("MENTOR_ID"))
ACCESS_PASSWORD = os.getenv("ACCESS_PASSWORD")


class MentorChatBot:
    """
    –ö–ª–∞—Å—Å MentorChatBot —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ª–æ–≥–∏–∫—É —á–∞—Ç-–±–æ—Ç–∞ –¥–ª—è IT-—à–∫–æ–ª—ã MyFreeIT.

    –ê—Ç—Ä–∏–±—É—Ç—ã:
      - bot (Bot): —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ aiogram.
      - dp (Dispatcher): –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
      - mentor_id (int): –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–µ–Ω—Ç–æ—Ä—Å–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.
      - access_password (str): –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ —Å–∏—Å—Ç–µ–º—É.
      - users (dict): –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ {user_id: username}.
      - sessions (dict): —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞ –º–µ–∂–¥—É –º–µ–Ω—Ç–æ—Ä–æ–º –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.
      - history (dict): –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ {participant_id: [—Å–æ–æ–±—â–µ–Ω–∏—è]}.
    """

    def __init__(self, token, mentor_id, access_password):
        self.bot = Bot(token=token)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.mentor_id = mentor_id
        self.access_password = access_password
        self.users = {}
        self.sessions = {}
        self.history = {}
        self.register_handlers()

    def register_handlers(self):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
        """
        self.dp.message.register(self.send_welcome, Command("start"))
        self.dp.callback_query.register(self.enter_school, lambda c: c.data == "enter_school")
        self.dp.message.register(self.check_password,
                                 lambda msg: msg.from_user.id not in self.users and msg.from_user.id != self.mentor_id)
        self.dp.message.register(self.waiting_message, lambda
            msg: msg.from_user.id in self.users and msg.from_user.id not in self.sessions and msg.from_user.id != self.mentor_id)
        self.dp.message.register(self.forward_to_mentor,
                                 lambda msg: msg.from_user.id in self.users and msg.from_user.id in self.sessions)
        self.dp.message.register(self.join_chat, Command("join"))
        self.dp.message.register(self.forward_to_user,
                                 lambda msg: msg.from_user.id == self.mentor_id and self.mentor_id in self.sessions)
        self.dp.callback_query.register(self.call_mentor, lambda c: c.data == "call_mentor")
        self.dp.message.register(self.end_chat, Command("end"))

    async def delete_webhook(self):
        """
        –£–¥–∞–ª—è–µ—Ç –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling.
        """
        await self.bot.delete_webhook(drop_pending_updates=True)

    async def send_welcome(self, message: types.Message):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π '–í–æ–π—Ç–∏'.
        """
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í–æ–π—Ç–∏", callback_data="enter_school")]
        ])
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ IT-—à–∫–æ–ª—É MyFreeIT!\n–ù–∞–∂–º–∏—Ç–µ '–í–æ–π—Ç–∏', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
            reply_markup=keyboard
        )

    async def enter_school(self, callback_query: types.CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–í–æ–π—Ç–∏'. –ü—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.
        """
        await self.bot.send_message(callback_query.from_user.id, "üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.")
        await callback_query.answer()

    async def check_password(self, message: types.Message):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü—Ä–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        if message.text == self.access_password:
            self.users[message.from_user.id] = message.from_user.username
            self.history[message.from_user.id] = []
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–∞", callback_data="call_mentor")]
            ])
            await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=keyboard)
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")

    async def call_mentor(self, callback_query: types.CallbackQuery):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω—Ç–æ—Ä—É –æ –∑–∞–ø—Ä–æ—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.
        """
        user_id = callback_query.from_user.id
        username = self.users.get(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        await self.bot.send_message(self.mentor_id, f"‚ö° –£—á–∞—Å—Ç–Ω–∏–∫ {username} –≤—ã–∑—ã–≤–∞–µ—Ç –≤–∞—Å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join.")
        await callback_query.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–µ–Ω—Ç–æ—Ä–∞.")

    async def start_polling(self):
        """
        –ó–∞–ø—É—Å–∫ polling –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞.
        """
        await self.delete_webhook()
        await self.dp.start_polling(self.bot)


if __name__ == "__main__":
    bot = MentorChatBot(TOKEN, MENTOR_ID, ACCESS_PASSWORD)
    bot.start_polling()
