"""
Mentoring Bot

Author: Denis Odesskiy (MyFreeIT)
Description: This script implements a Telegram chat-bot for the IT-school MyFreeIT.
It handles participant registration, password verification, session management between
the participant and a mentor, and message forwarding.

License: The product is the personal property of the author (Denis Odesskiy (MyFreeIT)) ‚Äì see LICENSE.
"""

import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
MENTOR_ID = int(os.getenv("MENTOR_ID"))
ACCESS_PASSWORD = os.getenv("ACCESS_PASSWORD")


class MentorChatBot:
    """
    Implements the chat-bot logic for the IT-school MyFreeIT.
    Handles registration, password verification, establishing session between a participant and a mentor,
    and message forwarding between them.
    """

    def __init__(self, token, mentor_id, access_password):
        self.bot = Bot(token=token)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.mentor_id = mentor_id
        self.access_password = access_password
        self.users = {}
        self.sessions = {}
        self.waitlist = []
        self.history = {}
        self.awaiting_name = {}  # Flag to keep track of users waiting for custom name input
        self.register_handlers()

    def register_handlers(self):
        # /start command
        self.dp.message.register(self.send_welcome, Command("start"))
        self.dp.callback_query.register(self.enter_school, lambda c: c.data == "enter_school")

        # Handle password verification for unregistered participants
        self.dp.message.register(
            self.check_password,
            lambda msg: (msg.from_user.id not in self.users)
                        and (msg.from_user.id != self.mentor_id)
                        and (msg.from_user.id not in self.awaiting_name)
        )

        # If participant already registered, show the "Call mentor" button
        self.dp.message.register(
            self.waiting_message,
            lambda msg: (msg.from_user.id in self.users)
                        and (msg.from_user.id not in self.sessions)
                        and (msg.from_user.id != self.mentor_id)
        )

        # Forward messages from participant to mentor
        self.dp.message.register(
            self.forward_to_mentor,
            lambda msg: (msg.from_user.id in self.users) and (msg.from_user.id in self.sessions)
        )

        # Mentor commands via slash commands /join and /end
        self.dp.message.register(self.join_chat, Command("join"))
        self.dp.message.register(self.end_chat, Command("end"))

        # Inline menu for mentor message forwarding (skipping texts starting with '/')
        self.dp.message.register(
            self.forward_to_user,
            lambda msg: (msg.from_user.id == self.mentor_id)
                        and (self.mentor_id in self.sessions)
                        and (not (msg.text and msg.text.startswith('/')))
        )

        # Callback for participant button "Call mentor"
        self.dp.callback_query.register(self.call_mentor, lambda c: c.data == "call_mentor")

        # Callbacks for handling missing username
        self.dp.callback_query.register(self.use_anonymous, lambda c: c.data == "use_anonymous")
        self.dp.callback_query.register(self.enter_custom_name, lambda c: c.data == "enter_custom_name")
        self.dp.message.register(self.set_custom_name, lambda msg: msg.from_user.id in self.awaiting_name)

        # Callback for mentor inline‚Äëmenu buttons
        self.dp.callback_query.register(self.mentor_join, lambda c: c.data == "mentor_join")
        self.dp.callback_query.register(self.mentor_end, lambda c: c.data == "mentor_end")

    async def delete_webhook(self):
        """Deletes the webhook before starting polling to avoid conflicts."""
        await self.bot.delete_webhook(drop_pending_updates=True)

    async def send_welcome(self, message: types.Message):
        """
        Sends a welcome message.
          - If user is the mentor, a menu with "Join" and "End chat" buttons is shown.
          - If the participant is registered, shows the "Call mentor" button.
          - Otherwise, presents the "Enter" button.
        """
        if message.from_user.id == self.mentor_id:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="mentor_join")],
                [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", callback_data="mentor_end")]
            ])
            await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –º–µ–Ω—Ç–æ—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (—Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã /join –∏ /end):",
                                 reply_markup=keyboard)
        else:
            if message.from_user.id in self.users:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–∞", callback_data="call_mentor")]
                ])
                await message.answer(
                    "üëã –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞ –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                    reply_markup=keyboard
                )
            else:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–í–æ–π—Ç–∏", callback_data="enter_school")]
                ])
                await message.answer(
                    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ IT-—à–∫–æ–ª—É MyFreeIT!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–í–æ–π—Ç–∏', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.",
                    reply_markup=keyboard
                )

    async def enter_school(self, callback_query: types.CallbackQuery):
        """Handles the 'Enter' button click, prompting the user to input the access password."""
        await self.bot.send_message(
            callback_query.from_user.id,
            "üîë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ —Å–∏—Å—Ç–µ–º—É IT-—à–∫–æ–ª—ã."
        )
        await callback_query.answer()

    async def check_password(self, message: types.Message):
        """
        Checks the entered password.
          - For mentor: registration is performed via /start.
          - For participants: if username is missing, offers options for registration.
        """
        if message.text == self.access_password:
            if message.from_user.id == self.mentor_id:
                self.users[
                    message.from_user.id] = message.from_user.username if message.from_user.username else "–ú–µ–Ω—Ç–æ—Ä"
                self.history[message.from_user.id] = []
                await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –º–µ–Ω—Ç–æ—Ä!")
            else:
                if message.from_user.username is None:
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="–í–æ–π—Ç–∏ –∫–∞–∫ –ê–Ω–æ–Ω–∏–º", callback_data="use_anonymous")],
                        [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –∏–º—è", callback_data="enter_custom_name")]
                    ])
                    await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –ù–æ –≤–∞—à–µ –∏–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—Ö–æ–¥–∞:",
                                         reply_markup=keyboard)
                    return
                else:
                    self.users[message.from_user.id] = message.from_user.username
                    self.history[message.from_user.id] = []
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–∞", callback_data="call_mentor")]
                    ])
                    await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=keyboard)
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")

    async def set_custom_name(self, message: types.Message):
        """
        Uses the entered text as the user's name if waiting for custom name input.
        """
        user_id = message.from_user.id
        if user_id in self.awaiting_name:
            chosen_name = message.text.strip()
            if not chosen_name:
                await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
                return
            self.users[user_id] = chosen_name
            self.history[user_id] = []
            self.awaiting_name.pop(user_id)
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–∞", callback_data="call_mentor")]
            ])
            await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –ø–æ–¥ –∏–º–µ–Ω–µ–º {chosen_name}.", reply_markup=keyboard)

    async def waiting_message(self, message: types.Message):
        """
        Notifies the participant that they are already registered and provides the "Call mentor" button.
        """
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–∞", callback_data="call_mentor")]
        ])
        await message.answer("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                             reply_markup=keyboard)

    async def call_mentor(self, callback_query: types.CallbackQuery):
        """
        Notifies the mentor about a participant's request.
        If a session is active, the participant is added to the waiting list.
        """
        user_id = callback_query.from_user.id
        username = self.users.get(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        if self.mentor_id in self.sessions:
            if user_id not in self.waitlist:
                self.waitlist.append(user_id)
                await self.bot.send_message(
                    self.mentor_id,
                    f"‚ö° –£—á–∞—Å—Ç–Ω–∏–∫ {username} ({user_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è. "
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è' –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /join –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞."
                )
            else:
                await self.bot.send_message(user_id, "–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–µ–Ω—Ç–æ—Ä—É.")
            await callback_query.answer("–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–µ–Ω—Ç–æ—Ä–∞.")
        else:
            await self.bot.send_message(
                self.mentor_id,
                f"‚ö° –£—á–∞—Å—Ç–Ω–∏–∫ {username} ({user_id}) –≤—ã–∑—ã–≤–∞–µ—Ç –≤–∞—Å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è' –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /join."
            )
            await callback_query.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–µ–Ω—Ç–æ—Ä–∞.")

    async def use_anonymous(self, callback: types.CallbackQuery):
        """
        Registers the participant under the name "–ê–Ω–æ–Ω–∏–º".
        """
        user_id = callback.from_user.id
        self.users[user_id] = "–ê–Ω–æ–Ω–∏–º"
        self.history[user_id] = []
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–∞", callback_data="call_mentor")]
        ])
        await self.bot.send_message(user_id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –ø–æ–¥ –∏–º–µ–Ω–µ–º –ê–Ω–æ–Ω–∏–º.", reply_markup=keyboard)
        await callback.answer()

    async def enter_custom_name(self, callback: types.CallbackQuery):
        """
        Switches the user to custom name input mode.
        """
        user_id = callback.from_user.id
        self.awaiting_name[user_id] = True
        await self.bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        await callback.answer()

    async def join_chat(self, message: types.Message):
        """
        Mentor command to join a waiting participant.
        If a session is already active or no participant is waiting, it notifies accordingly.
        """
        if message.from_user.id != self.mentor_id:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–µ–Ω—Ç–æ—Ä–∞!")
            return

        if self.mentor_id in self.sessions:
            await message.answer("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —á–∞—Ç –ø–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
            return

        if self.waitlist:
            user_id = self.waitlist.pop(0)
        else:
            waiting = [uid for uid in self.users if uid not in self.sessions and uid != self.mentor_id]
            if not waiting:
                await message.answer("üü¢ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ñ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å–∞.")
                return
            user_id = waiting[0]

        self.sessions[self.mentor_id] = user_id
        self.sessions[user_id] = self.mentor_id
        await message.answer(f"üì© –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —É—á–∞—Å—Ç–Ω–∏–∫—É {self.users.get(user_id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}.")
        await self.bot.send_message(user_id, "üë®‚Äçüè´ –ú–µ–Ω—Ç–æ—Ä –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!")

    async def mentor_join(self, callback: types.CallbackQuery):
        """
        Handler for the mentor inline button "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è".
        """
        if callback.from_user.id != self.mentor_id:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–µ–Ω—Ç–æ—Ä–∞!", show_alert=True)
            return

        class FakeMessage:
            pass

        fake_msg = FakeMessage()
        fake_msg.from_user = callback.from_user
        fake_msg.answer = lambda text, **kwargs: self.bot.send_message(callback.from_user.id, text)
        await self.join_chat(fake_msg)
        await callback.answer()

    async def mentor_end(self, callback: types.CallbackQuery):
        """
        Handler for the mentor inline button "–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç".
        """
        if callback.from_user.id != self.mentor_id:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–µ–Ω—Ç–æ—Ä–∞!", show_alert=True)
            return

        class FakeMessage:
            pass

        fake_msg = FakeMessage()
        fake_msg.from_user = callback.from_user
        fake_msg.answer = lambda text, **kwargs: self.bot.send_message(callback.from_user.id, text)
        await self.end_chat(fake_msg)
        await callback.answer()

    async def forward_to_mentor(self, message: types.Message):
        """
        Forwards a participant's message to the mentor.
        """
        uid = message.from_user.id
        if uid not in self.sessions:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∂–¥–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–µ–Ω—Ç–æ—Ä–∞.")
            return
        mentor_id = self.sessions[uid]
        self.history[uid].append(f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫: {message.text}")
        await self.bot.send_message(mentor_id, f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞:\n{message.text}")

    async def forward_to_user(self, message: types.Message):
        """
        Forwards the mentor's message to the participant.
        """
        if self.mentor_id not in self.sessions:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
            return
        user_id = self.sessions.get(self.mentor_id)
        if not user_id:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
            return
        self.history.setdefault(user_id, []).append(f"üë®‚Äçüè´ –ú–µ–Ω—Ç–æ—Ä: {message.text}")
        await self.bot.send_message(user_id, f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω—Ç–æ—Ä–∞:\n{message.text}")

    async def end_chat(self, message: types.Message):
        """
        Ends the current chat session. Only the mentor can end a session.
        After ending, the participant is notified with an option to call the mentor again.
        """
        if message.from_user.id != self.mentor_id:
            await message.answer("‚ùå –ß–∞—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –º–µ–Ω—Ç–æ—Ä!")
            return

        if self.mentor_id in self.sessions:
            user_id = self.sessions.pop(self.mentor_id, None)
            if user_id:
                self.sessions.pop(user_id, None)
                self.history.pop(user_id, None)
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–∞", callback_data="call_mentor")]
                ])
                await self.bot.send_message(
                    user_id,
                    "üìå –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω –º–µ–Ω—Ç–æ—Ä–æ–º. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞ –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                    reply_markup=keyboard
                )
            await message.answer("‚úÖ –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")
            if self.waitlist:
                next_id = self.waitlist[0]
                await self.bot.send_message(
                    self.mentor_id,
                    f"‚ö° –°–ª–µ–¥—É—é—â–∏–π —Å—Ç—É–¥–µ–Ω—Ç ({self.users.get(next_id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}) –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è' –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /join."
                )
        else:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")

    async def start_polling(self):
        """
        Deletes any existing webhook and starts long polling.
        """
        await self.delete_webhook()
        await self.dp.start_polling(self.bot)


if __name__ == "__main__":
    bot = MentorChatBot(TOKEN, MENTOR_ID, ACCESS_PASSWORD)


    async def run_web_server():
        """
        Starts a minimal HTTP server that listens on the port specified by the environment variable.
        This prevents Render from timing out due to the absence of any open ports.
        """
        from aiohttp import web

        async def handle(request):
            return web.Response(text="Mentoring Bot is running!")

        app = web.Application()
        app.add_routes([web.get("/", handle)])
        port = int(os.environ.get("PORT", 8000))
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, "0.0.0.0", port)
        await site.start()
        print(f"HTTP server is running on port {port}")
        # Keep the HTTP server running indefinitely.
        while True:
            await asyncio.sleep(3600)


    async def main():
        # Run both the Telegram bot (via polling) and the HTTP server concurrently.
        await asyncio.gather(
            bot.start_polling(),
            run_web_server()
        )


    asyncio.run(main())
