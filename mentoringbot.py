"""
Mentoring Bot

–ê–≤—Ç–æ—Ä: Denis Odesskiy (MyFreeIT)
–û–ø–∏—Å–∞–Ω–∏–µ: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ä–µ–∞–ª–∏–∑—É–µ—Ç —á–∞—Ç-–±–æ—Ç–∞ –¥–ª—è IT-—à–∫–æ–ª—ã MyFreeIT. –ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è
—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∏ –º–µ–Ω—Ç–æ—Ä–æ–º, –∞ —Ç–∞–∫–∂–µ
–ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É –Ω–∏–º–∏.

–õ–∏—Ü–µ–Ω–∑–∏—è: –ü—Ä–æ–¥—É–∫—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏—á–Ω–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ—Ä–∞ (Denis Odesskiy (MyFreeIT)) ‚Äì —Å–º. LICENSE.
"""

import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.storage.memory import MemoryStorage
# –ò—Å–ø–æ–ª—å–∑—É–µ–º MemoryStorage –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏.
# –î–ª—è –±–æ–ª–µ–µ —Å–µ—Ä—å—ë–∑–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, RedisStorage).
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
MENTOR_ID = int(os.getenv("MENTOR_ID"))
ACCESS_PASSWORD = os.getenv("ACCESS_PASSWORD")


class MentorChatBot:
    """
    –ö–ª–∞—Å—Å MentorChatBot —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ª–æ–≥–∏–∫—É —á–∞—Ç-–±–æ—Ç–∞ –¥–ª—è IT-—à–∫–æ–ª—ã MyFreeIT.

    –ê—Ç—Ä–∏–±—É—Ç—ã:
      - bot (Bot): —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ aiogram.
      - dp (Dispatcher): –¥–∏—Å–ø–µ—Ç—á–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
      - mentor_id (int): ID –º–µ–Ω—Ç–æ—Ä—Å–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.
      - access_password (str): –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ —Å–∏—Å—Ç–µ–º—É.
      - users (dict): –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ {user_id: –∏–º—è}.
      - sessions (dict): –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (—Å–≤—è–∑—å mentor_id ‚Üî user_id).
      - waitlist (list): –æ—á–µ—Ä–µ–¥—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
      - history (dict): –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
      - awaiting_name (dict): —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ (–µ—Å–ª–∏ –∏–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ Telegram).
    """

    def __init__(self, token, mentor_id, access_password):
        self.bot = Bot(token=token)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.mentor_id = mentor_id
        self.access_password = access_password
        self.users = {}
        self.sessions = {}
        self.waitlist = []
        self.history = {}
        self.awaiting_name = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–ª–∞–≥–∞ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
        self.register_handlers()

    def register_handlers(self):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏:
         - /start: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏.
         - Callback "enter_school": —Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞.
         - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ check_password (–æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –¥–ª—è –º–µ–Ω—Ç–æ—Ä–∞ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤).
         - –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏ –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–∞.
         - "–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–∞": –∑–∞–ø—Ä–æ—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞.
         - /join –∏ /end –¥–ª—è –º–µ–Ω—Ç–æ—Ä—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π.
         - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ callback'–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∏–º–µ–Ω–∏.
        """
        self.dp.message.register(self.send_welcome, Command("start"))
        self.dp.callback_query.register(self.enter_school, lambda c: c.data == "enter_school")
        self.dp.message.register(
            self.check_password,
            lambda msg: (msg.from_user.id not in self.users) and (msg.from_user.id != self.mentor_id)
        )
        self.dp.message.register(
            self.waiting_message,
            lambda msg: (msg.from_user.id in self.users)
                        and (msg.from_user.id not in self.sessions)
                        and (msg.from_user.id != self.mentor_id)
        )
        self.dp.message.register(
            self.forward_to_mentor,
            lambda msg: (msg.from_user.id in self.users) and (msg.from_user.id in self.sessions)
        )
        self.dp.message.register(self.join_chat, Command("join"))
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–Ω—Ç–æ—Ä–∞ ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã (–Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å–æ —Å–ª–µ—à–∞)
        self.dp.message.register(
            self.forward_to_user,
            lambda msg: (msg.from_user.id == self.mentor_id)
                        and (self.mentor_id in self.sessions)
                        and (not (msg.text and msg.text.startswith('/')))
        )
        self.dp.callback_query.register(self.call_mentor, lambda c: c.data == "call_mentor")
        self.dp.message.register(self.end_chat, Command("end"))
        # Callback'–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º –∏–º–µ–Ω–µ–º
        self.dp.callback_query.register(self.use_anonymous, lambda c: c.data == "use_anonymous")
        self.dp.callback_query.register(self.enter_custom_name, lambda c: c.data == "enter_custom_name")
        self.dp.message.register(self.set_custom_name, lambda msg: msg.from_user.id in self.awaiting_name)
        # Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–µ–Ω—Ç–æ—Ä—Å–∫–æ–≥–æ –º–µ–Ω—é
        self.dp.callback_query.register(self.mentor_join, lambda c: c.data == "mentor_join")
        self.dp.callback_query.register(self.mentor_end, lambda c: c.data == "mentor_end")

    async def delete_webhook(self):
        """–£–¥–∞–ª—è–µ—Ç –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞."""
        await self.bot.delete_webhook(drop_pending_updates=True)

    async def send_welcome(self, message: types.Message):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äì –º–µ–Ω—Ç–æ—Ä, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏:
          "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è" –∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç".
        –ò–Ω–∞—á–µ ‚Äì –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏".
        """
        if message.from_user.id == self.mentor_id:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="mentor_join")],
                [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", callback_data="mentor_end")]
            ])
            await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –º–µ–Ω—Ç–æ—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–í–æ–π—Ç–∏", callback_data="enter_school")]
            ])
            await message.answer(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ IT-—à–∫–æ–ª—É MyFreeIT!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–í–æ–π—Ç–∏', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.",
                reply_markup=keyboard
            )

    async def enter_school(self, callback_query: types.CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–í–æ–π—Ç–∏". –ü—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å.
        """
        await self.bot.send_message(
            callback_query.from_user.id,
            "üîë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ —Å–∏—Å—Ç–µ–º—É IT-—à–∫–æ–ª—ã."
        )
        await callback_query.answer()

    async def check_password(self, message: types.Message):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å.
        –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω:
          ‚Äì –¥–ª—è –º–µ–Ω—Ç–æ—Ä–∞ —Å—Ä–∞–∑—É —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –µ–≥–æ;
          ‚Äì –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: –µ—Å–ª–∏ username –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±–æ—Ä:
             "–í–æ–π—Ç–∏ –∫–∞–∫ –ê–Ω–æ–Ω–∏–º" –∏–ª–∏ "–í–≤–µ—Å—Ç–∏ –∏–º—è".
          –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç username –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
        """
        if message.text == self.access_password:
            if message.from_user.id == self.mentor_id:
                # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–µ–Ω—Ç–æ—Ä–∞
                self.users[
                    message.from_user.id] = message.from_user.username if message.from_user.username else "–ú–µ–Ω—Ç–æ—Ä"
                self.history[message.from_user.id] = []
                await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –º–µ–Ω—Ç–æ—Ä!")
            else:
                # –£—á–∞—Å—Ç–Ω–∏–∫
                if message.from_user.username is None:
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="–í–æ–π—Ç–∏ –∫–∞–∫ –ê–Ω–æ–Ω–∏–º", callback_data="use_anonymous")],
                        [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –∏–º—è", callback_data="enter_custom_name")]
                    ])
                    await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –ù–æ –≤–∞—à–µ –∏–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—Ö–æ–¥–∞:",
                                         reply_markup=keyboard)
                    return
                else:
                    self.users[message.from_user.id] = message.from_user.username
                    self.history[message.from_user.id] = []
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–∞", callback_data="call_mentor")]
                    ])
                    await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=keyboard)
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")

    async def set_custom_name(self, message: types.Message):
        """
        –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç
        –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –∏–º—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.
        """
        user_id = message.from_user.id
        if user_id in self.awaiting_name:
            chosen_name = message.text.strip()
            if not chosen_name:
                await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
                return
            self.users[user_id] = chosen_name
            self.history[user_id] = []
            self.awaiting_name.pop(user_id)
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–∞", callback_data="call_mentor")]
            ])
            await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –ø–æ–¥ –∏–º–µ–Ω–µ–º {chosen_name}.", reply_markup=keyboard)

    async def waiting_message(self, message: types.Message):
        """
        –°–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –∂–¥—ë—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–µ–Ω—Ç–æ—Ä–æ–º.
        """
        await message.answer("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–µ–Ω—Ç–æ—Ä–∞.")

    async def call_mentor(self, callback_query: types.CallbackQuery):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω—Ç–æ—Ä—É –æ –∑–∞–ø—Ä–æ—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞.
        –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è.
        """
        user_id = callback_query.from_user.id
        username = self.users.get(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        if self.mentor_id in self.sessions:
            if user_id not in self.waitlist:
                self.waitlist.append(user_id)
                await self.bot.send_message(
                    self.mentor_id,
                    f"‚ö° –£—á–∞—Å—Ç–Ω–∏–∫ {username} ({user_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è. "
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å—Ç—É–¥–µ–Ω—Ç—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞."
                )
            else:
                await self.bot.send_message(user_id, "–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–µ–Ω—Ç–æ—Ä—É.")
            await callback_query.answer("–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–µ–Ω—Ç–æ—Ä–∞.")
        else:
            await self.bot.send_message(
                self.mentor_id,
                f"‚ö° –£—á–∞—Å—Ç–Ω–∏–∫ {username} ({user_id}) –≤—ã–∑—ã–≤–∞–µ—Ç –≤–∞—Å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è'."
            )
            await callback_query.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–µ–Ω—Ç–æ—Ä–∞.")

    async def use_anonymous(self, callback: types.CallbackQuery):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ–¥ –∏–º–µ–Ω–µ–º "–ê–Ω–æ–Ω–∏–º".
        """
        user_id = callback.from_user.id
        self.users[user_id] = "–ê–Ω–æ–Ω–∏–º"
        self.history[user_id] = []
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–∞", callback_data="call_mentor")]
        ])
        await self.bot.send_message(user_id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –ø–æ–¥ –∏–º–µ–Ω–µ–º –ê–Ω–æ–Ω–∏–º.", reply_markup=keyboard)
        await callback.answer()

    async def enter_custom_name(self, callback: types.CallbackQuery):
        """
        –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏.
        """
        user_id = callback.from_user.id
        self.awaiting_name[user_id] = True
        await self.bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        await callback.answer()

    async def join_chat(self, message: types.Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–µ–Ω—Ç–æ—Ä–∞: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ–∂–∏–¥–∞—é—â–µ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É.
        –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ—Å–∏—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç.
        –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –æ—á–µ—Ä–µ–¥–∏ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π –æ–∂–∏–¥–∞—é—â–∏–π —Å—Ç—É–¥–µ–Ω—Ç.
        """
        if message.from_user.id != self.mentor_id:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–µ–Ω—Ç–æ—Ä–∞!")
            return

        if self.mentor_id in self.sessions:
            await message.answer("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —á–∞—Ç –ø–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
            return

        if self.waitlist:
            user_id = self.waitlist.pop(0)
        else:
            waiting = [uid for uid in self.users if uid not in self.sessions and uid != self.mentor_id]
            if not waiting:
                await message.answer("üü¢ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ñ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å–∞.")
                return
            user_id = waiting[0]

        self.sessions[self.mentor_id] = user_id
        self.sessions[user_id] = self.mentor_id
        await message.answer(f"üì© –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —É—á–∞—Å—Ç–Ω–∏–∫—É {self.users.get(user_id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}.")
        await self.bot.send_message(user_id, "üë®‚Äçüè´ –ú–µ–Ω—Ç–æ—Ä –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!")

    async def mentor_join(self, callback: types.CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline-–∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è" —É –º–µ–Ω—Ç–æ—Ä–∞.
        –î–µ–ª–µ–≥–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥—É join_chat.
        """
        await self.join_chat(callback.message)
        await callback.answer()

    async def mentor_end(self, callback: types.CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline-–∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç" —É –º–µ–Ω—Ç–æ—Ä–∞.
        –î–µ–ª–µ–≥–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥—É end_chat.
        """
        await self.end_chat(callback.message)
        await callback.answer()

    async def forward_to_mentor(self, message: types.Message):
        """
        –ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –º–µ–Ω—Ç–æ—Ä—É.
        """
        uid = message.from_user.id
        if uid not in self.sessions:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∂–¥–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–µ–Ω—Ç–æ—Ä–∞.")
            return
        mentor_id = self.sessions[uid]
        self.history[uid].append(f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫: {message.text}")
        await self.bot.send_message(mentor_id, f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞:\n{message.text}")

    async def forward_to_user(self, message: types.Message):
        """
        –ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—Ç–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫—É.
        """
        if self.mentor_id not in self.sessions:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
            return
        user_id = self.sessions.get(self.mentor_id)
        if not user_id:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
            return
        self.history.setdefault(user_id, []).append(f"üë®‚Äçüè´ –ú–µ–Ω—Ç–æ—Ä: {message.text}")
        await self.bot.send_message(user_id, f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω—Ç–æ—Ä–∞:\n{message.text}")

    async def end_chat(self, message: types.Message):
        """
        –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —á–∞—Ç. –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –º–µ–Ω—Ç–æ—Ä—É.
        –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞ –º–µ–Ω—Ç–æ—Ä—É —É–≤–µ–¥–æ–º–ª—è–µ—Ç—Å—è –æ —Å–ª–µ–¥—É—é—â–µ–º –æ–∂–∏–¥–∞—é—â–µ–º —Å—Ç—É–¥–µ–Ω—Ç–µ (–µ—Å–ª–∏ –µ—Å—Ç—å).
        """
        if message.from_user.id != self.mentor_id:
            await message.answer("‚ùå –ß–∞—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –º–µ–Ω—Ç–æ—Ä!")
            return

        if self.mentor_id in self.sessions:
            user_id = self.sessions.pop(self.mentor_id, None)
            if user_id:
                await self.bot.send_message(user_id, "üìå –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω –º–µ–Ω—Ç–æ—Ä–æ–º. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—â–µ–Ω–∏–µ!")
                self.sessions.pop(user_id, None)
                self.history.pop(user_id, None)
            await message.answer("‚úÖ –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")
            if self.waitlist:
                next_id = self.waitlist[0]
                await self.bot.send_message(
                    self.mentor_id,
                    f"‚ö° –°–ª–µ–¥—É—é—â–∏–π —Å—Ç—É–¥–µ–Ω—Ç ({self.users.get(next_id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}) –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è' –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
                )
        else:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")

    async def start_polling(self):
        """
        –£–¥–∞–ª—è–µ—Ç –≤–µ–±—Ö—É–∫ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å polling.
        """
        await self.delete_webhook()
        await self.dp.start_polling(self.bot)


if __name__ == "__main__":
    bot = MentorChatBot(TOKEN, MENTOR_ID, ACCESS_PASSWORD)
    import asyncio

    asyncio.run(bot.start_polling())
